import "prismjs/themes/prism.css"
import "prismjs/themes/prism-tomorrow.css"

import type { Metadata } from "next"
import { Geist, Geist_Mono } from "next/font/google"
import "../globals.css"
import { ThemeProvider } from "@/components/theme-provider"
import { AuthProvider, User } from "@/components/auth-context"
import { AuthPopup } from "@/components/auth-popup"
import { ModelsProvider } from "@/components/models-context"
import { Toaster } from "react-hot-toast"
import { auth } from "@/helpers/auth"
import { getUser } from "@/lib/queries"
import axios from "axios"
import { cookies } from "next/headers"
import { ChatProvider } from "@/components/chat-context"
import { v4 } from "uuid"

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
})

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
})

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
}

interface Model {
    name: string
    provider: string
    default?: boolean
}

async function getModels() {
    try {
        const response = await axios.get(
            `${process.env.BASE_URL}/api/chat/models`
        )
        return response.data
    } catch (error) {
        console.error("Failed to fetch models:", error)
        return []
    }
}

export default async function RootLayout({
    params,
    children,
}: Readonly<{
    children: React.ReactNode
    params: Promise<{
        chatId: string
    }>
}>) {
    const authUser = await auth()

    let user = null

    if (authUser) {
        user = (await getUser(authUser.email)) as unknown as User
    }

    // Fetch models and get selected model from cookie
    const [models, cookieStore] = await Promise.all([getModels(), cookies()])

    const selectedModelCookie = cookieStore.get("selectedModel")

    // Get default model from fetched models
    const defaultModel = models.find((model: Model) => model.default)
    const defaultModelName = defaultModel?.name || "gemini-2.0-flash-lite"

    // Check if selected model from cookie is valid
    let initialSelectedModel = defaultModelName

    if (selectedModelCookie?.value) {
        const isValidModel = models.some(
            (model: Model) => model.name === selectedModelCookie.value
        )
        if (isValidModel) {
            initialSelectedModel = selectedModelCookie.value
        }
    }

    return (
        <html lang="en" suppressHydrationWarning>
            <body
                className={`${geistSans.variable} ${geistMono.variable} antialiased`}
            >
                <ThemeProvider
                    attribute="class"
                    defaultTheme="system"
                    enableSystem
                    disableTransitionOnChange
                >
                    <AuthProvider initialUser={user}>
                        <ModelsProvider
                            initialModels={models}
                            initialSelectedModel={initialSelectedModel}
                        >
                            {children}
                            <AuthPopup />
                        </ModelsProvider>
                    </AuthProvider>
                    <Toaster position="bottom-right" />
                </ThemeProvider>
            </body>
        </html>
    )
}
